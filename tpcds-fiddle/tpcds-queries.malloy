import "./tpcds.malloy"

// --
// Name: Query 01
query: store_returns -> {
  group_by:
    sr_customer_sk
    sr_store_sk
    customer.c_customer_id
  aggregate: 
    customer_total_returns is total_returns
    avg_store_return is all(total_returns / count(distinct sr_customer_sk), sr_store_sk)
  where:
    date_dim.d_year = 2000
    and store.s_state = 'TN'
    and sr_return_amt != null
} -> {
  project:
    c_customer_id
  where: 
    customer_total_returns > avg_store_return * 1.2
  order_by:
    c_customer_id
  limit: 100
}

// --
// Name: Query 02
query: yoy_weekly_sales is weekly_sales {
  join_many: date_dim on d_week_seq = date_dim.d_week_seq
  join_one: weekly_sales on d_week_seq = weekly_sales.d_week_seq - 53
} -> {
  group_by: 
    d_week_seq
    r_sun is sun_sales / weekly_sales.sun_sales
    r_mon is mon_sales / weekly_sales.mon_sales
    r_tue is tue_sales / weekly_sales.tue_sales
    r_wed is wed_sales / weekly_sales.wed_sales
    r_thu is thu_sales / weekly_sales.thu_sales
    r_fri is fri_sales / weekly_sales.fri_sales
    r_sat is sat_sales / weekly_sales.sat_sales
  
  where: date_dim.d_year = 2001
  order_by: d_week_seq
}

// --
// Name: Query 03
query: store_sales -> {
  group_by: 
    d_year is date_dim.d_year
    brand_id is item.i_brand_id
    brand is item.i_brand

  aggregate:
    total_ext_sales

  where:
    item.i_manufact_id = 128
    and date_dim.d_moy = 11
  
  order_by: d_year, total_ext_sales DESC, brand_id
  limit: 100
}

// --
// Name: Query 04
query: all_sales -> {
  declare:
    catalog_total_sales_2001 is total_sales { where: date_dim.d_year = 2001 and channel_category = 'catalog channel'}
    catalog_total_sales_2002 is total_sales { where: date_dim.d_year = 2002 and channel_category = 'catalog channel'}
    web_total_sales_2001 is total_sales { where: date_dim.d_year = 2001 and channel_category = 'web channel'}
    web_total_sales_2002 is total_sales { where: date_dim.d_year = 2002 and channel_category = 'web channel'}
    store_total_sales_2001 is total_sales { where: date_dim.d_year = 2001 and channel_category = 'store channel'}
    store_total_sales_2002 is total_sales { where: date_dim.d_year = 2002 and channel_category = 'store channel'}

    catalog_yoy is catalog_total_sales_2002 / catalog_total_sales_2001
    store_yoy is store_total_sales_2002 / store_total_sales_2001
    web_yoy is web_total_sales_2002 / web_total_sales_2001

  group_by:
    customer.c_customer_id
    customer.c_first_name
    customer.c_last_name
    customer.c_preferred_cust_flag

  having:
    catalog_yoy > store_yoy
    and catalog_yoy > web_yoy
    and store_total_sales_2001 > 0
    and store_total_sales_2002 > 0
    and web_total_sales_2001 > 0
    and web_total_sales_2002 > 0
    and catalog_total_sales_2001 > 0
    and catalog_total_sales_2002 > 0

  order_by:
    c_customer_id 
    c_first_name 
    c_last_name 
    c_preferred_cust_flag 
}

// --
// Name: Query 05
query: daily_profit_loss -> {

  aggregate:
    total_sales
    total_returns
    net_profit

  nest: by_category + {
    nest: by_channel_id
    order_by: channel_category
  }

  where:
    d_date >= '2000-08-23' and d_date <= '2000-09-06'
}

// --
// Name: Query 06
query: all_sales -> {
  group_by: 
    item.i_category
    item.i_current_price
    item.i_item_id
    customer.customer_address.ca_state

  aggregate:
    avg_price is all(item.i_current_price.avg(), i_category)
    cnt is count(*)

  where:
    date_dim.d_year = 2001
    and date_dim.d_moy = 1
    and channel_category = 'store channel'
    and customer.c_customer_sk != null
} -> {
  group_by: ca_state
  aggregate: cnt is cnt.sum()
  where: i_current_price > avg_price * 1.2 
  having: cnt.sum() > 10
  order_by: 
    cnt
    ca_state
}

// --
// Name: Query 07
query: all_sales -> {
  group_by:
    item.i_item_id
  
  aggregate:
    avg_quantity
    avg_list_price
    avg_coupon_amt
    avg_sales_price

  where:
    channel_category = 'store channel'
    and customer_demographics.cd_gender = 'M'
    and customer_demographics.cd_marital_status = 'S'
    and customer_demographics.cd_education_status = 'College'
    and (promotion.p_channel_email = 'N' or promotion.p_channel_event = 'N')
    and date_dim.d_year = 2000

  order_by:
    i_item_id

  limit: 100
}

// --
// Name: Query 08
query: store_sales + {
  join_one: preferred_customer_zip on substring(store.s_zip, 1, 2) = preferred_customer_zip.ca_zip_prefix
} -> {
  group_by:
    store.s_store_name

  aggregate:
    net_profit is sum(ss_net_profit)

  where:
    preferred_customer_zip.ca_zip != null
    and date_dim.d_qoy = 2
    and date_dim.d_year = 1998
}

// --
// Name: Query 09
query: store_sales -> {
  aggregate:
    bucket1_count is count(*) { where: ss_quantity >= 1 and ss_quantity <= 20 }
    bucket2_count is count(*) { where: ss_quantity >= 21 and ss_quantity <= 40 }
    bucket3_count is count(*) { where: ss_quantity >= 41 and ss_quantity <= 60 }
    bucket4_count is count(*) { where: ss_quantity >= 61 and ss_quantity <= 80 }
    bucket5_count is count(*) { where: ss_quantity >= 81 and ss_quantity <= 100 }

    bucket1_avg_discount is avg(ss_ext_discount_amt) { where: ss_quantity >= 1 and ss_quantity <= 20 }
    bucket2_avg_discount is avg(ss_ext_discount_amt) { where: ss_quantity >= 21 and ss_quantity <= 40 }
    bucket3_avg_discount is avg(ss_ext_discount_amt) { where: ss_quantity >= 41 and ss_quantity <= 60 }
    bucket4_avg_discount is avg(ss_ext_discount_amt) { where: ss_quantity >= 61 and ss_quantity <= 80 }
    bucket5_avg_discount is avg(ss_ext_discount_amt) { where: ss_quantity >= 81 and ss_quantity <= 100 }

    bucket1_avg_net_paid is avg(ss_net_paid) { where: ss_quantity >= 1 and ss_quantity <= 20 }
    bucket2_avg_net_paid is avg(ss_net_paid) { where: ss_quantity >= 21 and ss_quantity <= 40 }
    bucket3_avg_net_paid is avg(ss_net_paid) { where: ss_quantity >= 41 and ss_quantity <= 60 }
    bucket4_avg_net_paid is avg(ss_net_paid) { where: ss_quantity >= 61 and ss_quantity <= 80 }
    bucket5_avg_net_paid is avg(ss_net_paid) { where: ss_quantity >= 81 and ss_quantity <= 100 }
} -> {
  project: 
    bucket1 is pick bucket1_avg_discount when bucket1_count > 74129
               else bucket1_avg_net_paid

    bucket2 is pick bucket2_avg_discount when bucket2_count > 122840
               else bucket2_avg_net_paid

    bucket3 is pick bucket3_avg_discount when bucket3_count > 56580
               else bucket3_avg_net_paid

    bucket4 is pick bucket4_avg_discount when bucket4_count > 10097
               else bucket4_avg_net_paid

    bucket5 is pick bucket5_avg_discount when bucket5_count > 165306
               else bucket5_avg_net_paid
}

// --
// Name: Query 10
query: all_sales -> {
  group_by:
    customer.customer_demographics.cd_gender
    customer.customer_demographics.cd_marital_status
    customer.customer_demographics.cd_education_status
    customer.customer_demographics.cd_purchase_estimate
    customer.customer_demographics.cd_credit_rating
    customer.customer_demographics.cd_dep_count
    customer.customer_demographics.cd_dep_employed_count
    customer.customer_demographics.cd_dep_college_count

  aggregate:
    customer_count is count(distinct customer_sk)

  where:
    date_dim.d_year = 2002
    and date_dim.d_moy >= 1
    and date_dim.d_moy <= 4
    and (
      customer.customer_address.ca_county = 'Rush County'
      or customer.customer_address.ca_county = 'Toole County'
      or customer.customer_address.ca_county = 'Jefferson County'
      or customer.customer_address.ca_county = 'Dona Ana County'
      or customer.customer_address.ca_county = 'La Porte County'
    )
    and customer.customer_demographics.cd_gender != null
  
  having:
    count_store_sales > 0
    and (
      count_web_sales > 0
      or count_catalog_sales > 0
    )
  
  order_by: 
    cd_gender
    cd_marital_status
    cd_education_status
    cd_purchase_estimate
    cd_credit_rating
    cd_dep_count
    cd_dep_employed_count
    cd_dep_college_count
}

// --
// Name: Query 11
query: all_sales -> {
  declare:
    web_total_sales_2001 is total_list_minus_discount { where: date_dim.d_year = 2001 and channel_category = 'web channel'}
    web_total_sales_2002 is total_list_minus_discount { where: date_dim.d_year = 2002 and channel_category = 'web channel'}
    store_total_sales_2001 is total_list_minus_discount { where: date_dim.d_year = 2001 and channel_category = 'store channel'}
    store_total_sales_2002 is total_list_minus_discount { where: date_dim.d_year = 2002 and channel_category = 'store channel'}

    store_yoy is store_total_sales_2002 / store_total_sales_2001
    web_yoy is web_total_sales_2002 / web_total_sales_2001

  group_by:
    customer.c_customer_id
    customer.c_first_name
    customer.c_last_name
    customer.c_preferred_cust_flag

  having:
    store_total_sales_2001 > 0
    and store_total_sales_2002 > 0
    and web_total_sales_2001 > 0
    and web_total_sales_2002 > 0
    and web_total_sales_2002 / web_total_sales_2001 > store_total_sales_2002 / store_total_sales_2001

  order_by:
    c_customer_id 
    c_first_name 
    c_last_name 
    c_preferred_cust_flag 

  limit: 100
}

// --
// Name: Query 12
query: web_sales -> {
  group_by:
    item.i_item_id
    item.i_item_desc
    item.i_category
    item.i_class
    item.i_current_price

  declare:
    item_class_revenue is all(sum(ws_ext_sales_price), i_class)

  aggregate:
    total_ext_sales
    revenueratio is 100.0 * total_ext_sales / item_class_revenue

  where:
    (
      item.i_category = 'Sports'
      or item.i_category = 'Books'
      or item.i_category = 'Home'
    )
    and date_dim.d_date >= '1999-02-22'
    and date_dim.d_date <= '1999-03-24'

  order_by:
    i_category
    i_class
    i_item_id
    i_item_desc
    revenueratio

  limit: 100
}

// --
// Name: Query 13
query: store_sales -> {
  aggregate:
    avg1 is avg(ss_quantity)
    avg2 is avg(ss_ext_sales_price)
    avg3 is avg(ss_ext_wholesale_cost)
    sum1 is sum(ss_ext_wholesale_cost)

  where:
    date_dim.d_year = 2001
    and (
      (
        customer_demographics.cd_marital_status = 'M'
        and customer_demographics.cd_education_status = 'Advanced Degree'
        and ss_sales_price >= 100.0
        and ss_sales_price <= 150.0
        and household_demographics.hd_dep_count = 3
      )
      OR (
        customer_demographics.cd_marital_status = 'S'
        and customer_demographics.cd_education_status = 'College'
        and ss_sales_price >= 50.0
        and ss_sales_price <= 100.0
        and household_demographics.hd_dep_count = 1
      )
      OR (
        customer_demographics.cd_marital_status = 'W'
        and customer_demographics.cd_education_status = '2 yr Degree'
        and ss_sales_price >= 150.0
        and ss_sales_price <= 200.0
        and household_demographics.hd_dep_count = 1
      )
    )
    and (
      (
        customer_address.ca_country = 'United States'
        and (
          customer_address.ca_state = 'TX'
          or customer_address.ca_state = 'OH'
          or customer_address.ca_state = 'TX'
        )
        and ss_net_profit >= 100
        and ss_net_profit <= 200
      )
      or (
        customer_address.ca_country = 'United States'
        and (
          customer_address.ca_state = 'OR'
          or customer_address.ca_state = 'NM'
          or customer_address.ca_state = 'KY'
        )
        and ss_net_profit >= 150
        and ss_net_profit <= 300
      )
      or (
        customer_address.ca_country = 'United States'
        and (
          customer_address.ca_state = 'VA'
          or customer_address.ca_state = 'TX'
          or customer_address.ca_state = 'MS'
        )
        and ss_net_profit >= 50
        and ss_net_profit <= 250
      )
    )
}

// --
// Name: Query 14
query: all_sales + {
  join_one: relevant_items with item_sk
  join_one: avg_sales on true
} -> {
  declare:
    sales is sum(quantity * list_price)
    number_sales is count(*)

  aggregate:
    sales
    number_sales

  nest: by_channel is {
    group_by: channel_category
    aggregate:
      sales
      number_sales

    nest: by_brand is {
      group_by: item.i_brand_id
      aggregate:
        sales
        number_sales

      nest: by_class is {
        group_by: item.i_class_id
        aggregate:
          sales
          number_sales

        nest: by_category_id is {
          group_by: item.i_category_id
          aggregate:
            sales
            number_sales
        }
      }
    }
  }

  where: relevant_items.item_sk != null
    and date_dim.d_year = 2001
    and date_dim.d_moy = 11

  having: sum(quantity * list_price) > max(avg_sales.average_sales)
}
